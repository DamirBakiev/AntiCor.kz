import React, { useState } from "react";
import axios from "axios";


function GeminiConsultant() {
  const [userInput, setUserInput] = useState("");
  const [answer, setAnswer] = useState([]);
  const [isOpen, setIsOpen] = useState(true); // —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∫–Ω–∞

  const ask = () => {
    if (!userInput.trim()) return;

    axios
      .post(
        "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=AIzaSyAtOX-Yvymqz8ogViLD1EyzdqLPK85W3wQ",
        {
          contents: [
            {
              parts: [
                {
                  text:
                    userInput +
                    "\n–ú–Ω–µ –Ω—É–∂–Ω—ã –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Ç–æ–ª—å–∫–æ –∫–∞—Å–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ –∫–æ—Ä—Ä—É–ø—Ü–∏—é.",
                },
              ],
            },
          ],
        },
        { headers: { "Content-Type": "application/json" } }
      )
      .then((response) => {
        setAnswer([
          ...answer,
          {
            answer:
              response.data.candidates?.[0]?.content?.parts?.[0]?.text ||
              "–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞.",
            question: userInput,
          },
        ]);
        setUserInput("");
      })
      .catch((error) => {
        console.error("“ö–∞—Ç–µ:", error);
        alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ Gemini API.");
      });
  };

  return (
    <>
      {/* –ò–∫–æ–Ω–∫–∞ –ø—Ä–∏ —Å–≤–µ—Ä–Ω—É—Ç–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ */}
      {!isOpen && (
        <div
          className="gemini-icon"
          onClick={() => setIsOpen(true)}
          title="–û—Ç–∫—Ä—ã—Ç—å –ø–æ–º–æ—â–Ω–∏–∫–∞"
        >
          ü§ñ
        </div>
      )}

      {/* –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π */}
      <div className={`gemini-container ${isOpen ? "open" : "closed"}`}>
        <div className="gemini-header">
          <h2>ü§ñ –í–∞—à –ø–æ–º–æ—â–Ω–∏–∫</h2>
          <button className="close-btn" onClick={() => setIsOpen(false)}>
            √ó
          </button>
        </div>

        <div className="qa-list">
          {answer.map((n, i) => (
            <div key={i} className="qa-card">
              <p><b>–í–æ–ø—Ä–æ—Å:</b> {n.question}</p>
              <p><b>–û—Ç–≤–µ—Ç:</b> {n.answer}</p>
            </div>
          ))}
        </div>

        <div className="input-area">
          <input
            type="text"
            value={userInput}
            onChange={(e) => setUserInput(e.target.value)}
            placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ß—Ç–æ —Ç–∞–∫–æ–µ –∫–æ—Ä—Ä—É–ø—Ü–∏—è?"
          />
          <button onClick={ask}>–°–ø—Ä–æ—Å–∏—Ç—å</button>
        </div>
      </div>
    </>
  );
}

export default GeminiConsultant;


